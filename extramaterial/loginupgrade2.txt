import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth'; // Assuming this hook exists
import ThreadBackground from '../components/ThreadBackground'; // The background component is now imported
import { FcGoogle } from 'react-icons/fc'; // Import the Google icon

// SVG Icon Components for better readability
const MailIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400">
        <rect width="20" height="16" x="2" y="4" rx="2" />
        <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" />
    </svg>
);

const LockIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400">
        <rect width="18" height="11" x="3" y="11" rx="2" ry="2" />
        <path d="M7 11V7a5 5 0 0 1 10 0v4" />
    </svg>
);

const PhoneIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400">
        <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" />
    </svg>
);

const Spinner = () => (
    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
);


export default function LoginPage() {
    // Assuming useAuth provides these functions and user state
    // This is a mock for demonstration purposes.
    const { user, login, loginWithEmailPassword, loginWithPhone } = useAuth() || {
        user: null,
        login: async () => console.log('Google login'),
        loginWithEmailPassword: async (email, pass) => console.log(`Email login: ${email}`),
        loginWithPhone: async (phone) => console.log(`Phone login: ${phone}`),
    };

    const navigate = useNavigate();

    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [phone, setPhone] = useState('');
    
    const [isLoading, setIsLoading] = useState({ google: false, email: false, phone: false });
    const [error, setError] = useState('');

    useEffect(() => {
        if (user) navigate('/', { replace: true });
    }, [user, navigate]);

    const handleGoogleLogin = async () => {
        setError('');
        setIsLoading(prev => ({ ...prev, google: true }));
        try {
            await login();
        } catch (err) {
            setError(err.message || 'Google login failed.');
        } finally {
            setIsLoading(prev => ({ ...prev, google: false }));
        }
    };

    const handleEmailLogin = async (e) => {
        e.preventDefault();
        if (!email || !password) {
            setError("Please enter both email and password.");
            return;
        }
        setError('');
        setIsLoading(prev => ({ ...prev, email: true }));
        try {
            await loginWithEmailPassword(email, password);
        } catch (err) {
            setError(err.message || 'Failed to log in. Please check your credentials.');
        } finally {
            setIsLoading(prev => ({ ...prev, email: false }));
        }
    };

    const handlePhoneLogin = async (e) => {
        e.preventDefault();
        if (phone.length !== 10) {
            setError("Please enter a valid 10-digit phone number.");
            return;
        }
        const fullPhoneNumber = `+91${phone}`;
        setError('');
        setIsLoading(prev => ({ ...prev, phone: true }));
        try {
            await loginWithPhone(fullPhoneNumber);
            // You might want to navigate to an OTP verification page here
        } catch (err) {
            setError(err.message || 'Failed to send OTP. Please try again.');
        } finally {
            setIsLoading(prev => ({ ...prev, phone: false }));
        }
    };

    return (
        <>
            <ThreadBackground />
            <div className="min-h-screen flex items-center justify-center font-sans p-4">
                <div className="w-full max-w-md p-8 space-y-6 rounded-2xl">
                    {/* Logo and Title */}
                    <div className="text-center">
                        <div className="flex justify-center">
                             <svg viewBox="0 0 180 60" width="220" height="60">
                                 <text id="nutrithy-logo" x="0" y="45" fontSize="40" fill="none" stroke="#22c55e" strokeWidth="2" strokeDasharray="1000" strokeDashoffset="1000">
                                     Nutrithy üç≥
                                 </text>
                                 <animate xlinkHref="#nutrithy-logo" attributeName="stroke-dashoffset" from="1000" to="0" dur="5s" fill="freeze" begin="0.3s" />
                             </svg>
                        </div>
                        <p className="text-gray-400 text-sm mt-2">
                            Your intelligent cooking assistant.
                        </p>
                    </div>

                    {/* Google Sign-In */}
                    <button
                        onClick={handleGoogleLogin}
                        disabled={isLoading.google}
                        className="w-full flex items-center justify-center gap-3 px-5 py-3 border border-slate-600 rounded-lg bg-slate-800 hover:bg-slate-700 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-900 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        {isLoading.google ? <Spinner /> : <FcGoogle className="text-2xl" />}
                        <span className="text-sm font-medium text-gray-200">
                            Sign in with Google
                        </span>
                    </button>

                    {/* Divider */}
                    <div className="flex items-center">
                        <div className="flex-grow border-t border-slate-700"></div>
                        <span className="flex-shrink mx-4 text-xs text-slate-500">OR CONTINUE WITH</span>
                        <div className="flex-grow border-t border-slate-700"></div>
                    </div>

                    {/* Email/Password Login */}
                    <form onSubmit={handleEmailLogin} className="space-y-4">
                        <div className="relative">
                            <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                                <MailIcon />
                            </span>
                            <input
                                type="email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                placeholder="Email address"
                                className="w-full pl-10 pr-3 py-2.5 bg-slate-800 border border-slate-700 rounded-lg text-gray-200 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors"
                            />
                        </div>
                        <div className="relative">
                            <span className="absolute inset-y-0 left-0 flex items-center pl-3">
                                <LockIcon />
                            </span>
                            <input
                                type="password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                placeholder="Password"
                                className="w-full pl-10 pr-3 py-2.5 bg-slate-800 border border-slate-700 rounded-lg text-gray-200 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors"
                            />
                        </div>
                        <button
                            type="submit"
                            disabled={isLoading.email}
                            className="w-full flex items-center justify-center gap-2 py-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-900 focus:ring-green-500 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isLoading.email && <Spinner />}
                            Login with Email
                        </button>
                    </form>

                    {/* Phone Login */}
                    <form onSubmit={handlePhoneLogin} className="space-y-4 pt-2">
                         <div className="relative">
                            <span className="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                                <PhoneIcon />
                            </span>
                             <span className="absolute inset-y-0 left-10 flex items-center text-gray-400 pointer-events-none">
                                +91
                            </span>
                            <input
                                type="tel"
                                value={phone}
                                onChange={(e) => {
                                    const value = e.target.value;
                                    // Allow only numbers and limit to 10 digits
                                    if (/^\d*$/.test(value) && value.length <= 10) {
                                        setPhone(value);
                                    }
                                }}
                                placeholder="XXXXXXXXXX"
                                className="w-full pl-20 pr-3 py-2.5 bg-slate-800 border border-slate-700 rounded-lg text-gray-200 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
                            />
                        </div>
                        <button
                            type="submit"
                            disabled={isLoading.phone}
                            className="w-full flex items-center justify-center gap-2 py-3 border-2 border-blue-500 text-blue-400 hover:bg-blue-500 hover:text-white font-semibold rounded-lg transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-slate-900 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isLoading.phone && <Spinner />}
                            Send OTP
                        </button>
                        <div id="recaptcha-container"></div>
                        {/* <div id="recaptcha-container" className="flex justify-center p-2">
                             <div className="flex items-center gap-4 bg-slate-800 border border-slate-700 p-3 rounded-md w-full max-w-xs">
                                <input type="checkbox" className="form-checkbox h-6 w-6 bg-slate-900 border-slate-600 rounded text-blue-500 focus:ring-blue-500" />
                                <span className="text-sm text-gray-300">I'm not a robot</span>
                                <img src="https://www.gstatic.com/recaptcha/api2/logo_48.png" alt="reCAPTCHA" width="32" height="32" />
                            </div>
                        </div> */}
                    </form>
                    
                    {/* Error Message */}
                    {error && (
                        <p className="text-center text-sm text-red-400 bg-red-500/10 p-3 rounded-lg border border-red-400/30">
                            {error}
                        </p>
                    )}
                    
                    {/* Terms and Conditions */}
                    <div className="text-center text-xs text-gray-500 pt-4">
                        By continuing, you agree to Nutrithy's <br/>
                        <a href="#" className="underline hover:text-gray-300">Terms of Service</a> and <a href="#" className="underline hover:text-gray-300">Privacy Policy</a>.
                    </div>

                    <p className="text-xs text-gray-500 text-center pt-2">Start your smart cooking journey.</p>
                </div>
            </div>
        </>
    );
}
